package com.las3.xml {    import flash.events.*;    import flash.net.*;	import com.las3.loading.LoadURL;    	public class LoadXML extends EventDispatcher {			private var _xml:XML;		private var textXML:String;		private var _loader:LoadURL;				function LoadXML(path:String, verbose:Boolean=false) {			_loader = new LoadURL(path, verbose)			_loader.addEventListener("dataLoaded", onComplete, false, 0, true);		}		        private function onComplete(evt:Event):void {			try {				_xml = new XML(_loader.urlData);				dispatchEvent(new Event("xmlLoaded"));			} catch (err:TypeError) {				trace("Could not parse loaded content as XML\n" + err.message);			}        }				public function get xmlData():XML {			return _xml;		}				public function xmlDisplay(node:*="<root/>"):String {			if (!(node is XML) || !(node is XMLList)) {				node = _xml;			}			textXML = "";			return buildXMLText(node, 0);		}				private function buildXMLText(node:XML, indentLevel:Number):String {			for each (var element:XML in node.elements()) {				if (element.hasSimpleContent()) {					textXML += padIndent(indentLevel) + element.name() + ": " + element + "\n";					textXML += buildAttributes(element, indentLevel+1);				} else {					textXML += padIndent(indentLevel) + element.name() + ":\n";					textXML += buildAttributes(element, indentLevel + 1);					buildXMLText(element, indentLevel + 1);				}			}			return textXML;		}				private function buildAttributes(node:XML, indentLevel:Number):String {			var temp:String = "";			if (node.attributes().length() > 0) {				for each (var att:XML in node.attributes()) {					temp += padIndent(indentLevel) + "@" + att.name() + ": " + att + "\n";				}			}			return temp;		}				private function padIndent(indents:int):String {			var indent:String = "";			for (var i:uint = 0; i < indents; i++) {				indent += "    ";			}			return indent;		}	}}